/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface QuadraticVotingInterface extends utils.Interface {
  functions: {
    "castVote(address,string,uint256,bool)": FunctionFragment;
    "countVotesForProposal(bytes32,string)": FunctionFragment;
    "createProposal(string)": FunctionFragment;
    "cycles(bytes32)": FunctionFragment;
    "extendCycle(uint256)": FunctionFragment;
    "getCurrentCycleHash()": FunctionFragment;
    "getCycleProposingDeadline(bytes32)": FunctionFragment;
    "getCycleStatus(bytes32)": FunctionFragment;
    "getCycleVotingDeadline(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "proposalThreshold()": FunctionFragment;
    "proposingPeriod()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setProposalThreshold(uint256)": FunctionFragment;
    "setProposingPeriod(uint256)": FunctionFragment;
    "setVotingPeriod(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "votingPeriod()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "castVote"
      | "countVotesForProposal"
      | "createProposal"
      | "cycles"
      | "extendCycle"
      | "getCurrentCycleHash"
      | "getCycleProposingDeadline"
      | "getCycleStatus"
      | "getCycleVotingDeadline"
      | "owner"
      | "proposalThreshold"
      | "proposingPeriod"
      | "renounceOwnership"
      | "setProposalThreshold"
      | "setProposingPeriod"
      | "setVotingPeriod"
      | "transferOwnership"
      | "votingPeriod"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "castVote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "countVotesForProposal",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cycles",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "extendCycle",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentCycleHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCycleProposingDeadline",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCycleStatus",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCycleVotingDeadline",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposingPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "countVotesForProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cycles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extendCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentCycleHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCycleProposingDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCycleStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCycleVotingDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;

  events: {
    "CycleCreated(bytes32)": EventFragment;
    "ExtendedProposalPeriod(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProposalCreated(bytes32,string)": EventFragment;
    "ProposalThresholdSet(uint256,uint256)": EventFragment;
    "ProposingPeriodSet(uint256,uint256)": EventFragment;
    "VoteCast(address,string,bool,uint256)": EventFragment;
    "VotingPeriodSet(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CycleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtendedProposalPeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalThresholdSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposingPeriodSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingPeriodSet"): EventFragment;
}

export interface CycleCreatedEventObject {
  cycleHash: string;
}
export type CycleCreatedEvent = TypedEvent<[string], CycleCreatedEventObject>;

export type CycleCreatedEventFilter = TypedEventFilter<CycleCreatedEvent>;

export interface ExtendedProposalPeriodEventObject {
  additionalDays: BigNumber;
}
export type ExtendedProposalPeriodEvent = TypedEvent<
  [BigNumber],
  ExtendedProposalPeriodEventObject
>;

export type ExtendedProposalPeriodEventFilter =
  TypedEventFilter<ExtendedProposalPeriodEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProposalCreatedEventObject {
  cycleHash: string;
  proposalHash: string;
}
export type ProposalCreatedEvent = TypedEvent<
  [string, string],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalThresholdSetEventObject {
  oldProposalThreshold: BigNumber;
  newProposalThreshold: BigNumber;
}
export type ProposalThresholdSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  ProposalThresholdSetEventObject
>;

export type ProposalThresholdSetEventFilter =
  TypedEventFilter<ProposalThresholdSetEvent>;

export interface ProposingPeriodSetEventObject {
  oldProposingPeriod: BigNumber;
  newProposingPeriod: BigNumber;
}
export type ProposingPeriodSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  ProposingPeriodSetEventObject
>;

export type ProposingPeriodSetEventFilter =
  TypedEventFilter<ProposingPeriodSetEvent>;

export interface VoteCastEventObject {
  voter: string;
  proposalHash: string;
  voteDirection: boolean;
  castVotes: BigNumber;
}
export type VoteCastEvent = TypedEvent<
  [string, string, boolean, BigNumber],
  VoteCastEventObject
>;

export type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;

export interface VotingPeriodSetEventObject {
  oldVotingPeriod: BigNumber;
  newVotingPeriod: BigNumber;
}
export type VotingPeriodSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  VotingPeriodSetEventObject
>;

export type VotingPeriodSetEventFilter = TypedEventFilter<VotingPeriodSetEvent>;

export interface QuadraticVoting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QuadraticVotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    castVote(
      _voterAddress: PromiseOrValue<string>,
      _proposalHash: PromiseOrValue<string>,
      _numTokens: PromiseOrValue<BigNumberish>,
      _voteDirection: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    countVotesForProposal(
      _cycleHash: PromiseOrValue<BytesLike>,
      _proposalHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    createProposal(
      _proposalHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cycles(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        cycleHash: string;
        proposingDeadline: BigNumber;
        proposalCount: BigNumber;
        votingCredits: BigNumber;
      }
    >;

    extendCycle(
      _additionalDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentCycleHash(overrides?: CallOverrides): Promise<[string]>;

    getCycleProposingDeadline(
      _cycleHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCycleStatus(
      _cycleHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getCycleVotingDeadline(
      _cycleHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposalThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProposalThreshold(
      _newProposalThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProposingPeriod(
      _newProposingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVotingPeriod(
      _newVotingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  castVote(
    _voterAddress: PromiseOrValue<string>,
    _proposalHash: PromiseOrValue<string>,
    _numTokens: PromiseOrValue<BigNumberish>,
    _voteDirection: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  countVotesForProposal(
    _cycleHash: PromiseOrValue<BytesLike>,
    _proposalHash: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  createProposal(
    _proposalHash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cycles(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      cycleHash: string;
      proposingDeadline: BigNumber;
      proposalCount: BigNumber;
      votingCredits: BigNumber;
    }
  >;

  extendCycle(
    _additionalDays: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentCycleHash(overrides?: CallOverrides): Promise<string>;

  getCycleProposingDeadline(
    _cycleHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCycleStatus(
    _cycleHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  getCycleVotingDeadline(
    _cycleHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  proposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  proposingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProposalThreshold(
    _newProposalThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProposingPeriod(
    _newProposingPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVotingPeriod(
    _newVotingPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    castVote(
      _voterAddress: PromiseOrValue<string>,
      _proposalHash: PromiseOrValue<string>,
      _numTokens: PromiseOrValue<BigNumberish>,
      _voteDirection: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    countVotesForProposal(
      _cycleHash: PromiseOrValue<BytesLike>,
      _proposalHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    createProposal(
      _proposalHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cycles(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        cycleHash: string;
        proposingDeadline: BigNumber;
        proposalCount: BigNumber;
        votingCredits: BigNumber;
      }
    >;

    extendCycle(
      _additionalDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentCycleHash(overrides?: CallOverrides): Promise<string>;

    getCycleProposingDeadline(
      _cycleHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCycleStatus(
      _cycleHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    getCycleVotingDeadline(
      _cycleHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    proposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    proposingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setProposalThreshold(
      _newProposalThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProposingPeriod(
      _newProposingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVotingPeriod(
      _newVotingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "CycleCreated(bytes32)"(cycleHash?: null): CycleCreatedEventFilter;
    CycleCreated(cycleHash?: null): CycleCreatedEventFilter;

    "ExtendedProposalPeriod(uint256)"(
      additionalDays?: null
    ): ExtendedProposalPeriodEventFilter;
    ExtendedProposalPeriod(
      additionalDays?: null
    ): ExtendedProposalPeriodEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ProposalCreated(bytes32,string)"(
      cycleHash?: null,
      proposalHash?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      cycleHash?: null,
      proposalHash?: null
    ): ProposalCreatedEventFilter;

    "ProposalThresholdSet(uint256,uint256)"(
      oldProposalThreshold?: null,
      newProposalThreshold?: null
    ): ProposalThresholdSetEventFilter;
    ProposalThresholdSet(
      oldProposalThreshold?: null,
      newProposalThreshold?: null
    ): ProposalThresholdSetEventFilter;

    "ProposingPeriodSet(uint256,uint256)"(
      oldProposingPeriod?: null,
      newProposingPeriod?: null
    ): ProposingPeriodSetEventFilter;
    ProposingPeriodSet(
      oldProposingPeriod?: null,
      newProposingPeriod?: null
    ): ProposingPeriodSetEventFilter;

    "VoteCast(address,string,bool,uint256)"(
      voter?: null,
      proposalHash?: null,
      voteDirection?: null,
      castVotes?: null
    ): VoteCastEventFilter;
    VoteCast(
      voter?: null,
      proposalHash?: null,
      voteDirection?: null,
      castVotes?: null
    ): VoteCastEventFilter;

    "VotingPeriodSet(uint256,uint256)"(
      oldVotingPeriod?: null,
      newVotingPeriod?: null
    ): VotingPeriodSetEventFilter;
    VotingPeriodSet(
      oldVotingPeriod?: null,
      newVotingPeriod?: null
    ): VotingPeriodSetEventFilter;
  };

  estimateGas: {
    castVote(
      _voterAddress: PromiseOrValue<string>,
      _proposalHash: PromiseOrValue<string>,
      _numTokens: PromiseOrValue<BigNumberish>,
      _voteDirection: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    countVotesForProposal(
      _cycleHash: PromiseOrValue<BytesLike>,
      _proposalHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createProposal(
      _proposalHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cycles(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extendCycle(
      _additionalDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentCycleHash(overrides?: CallOverrides): Promise<BigNumber>;

    getCycleProposingDeadline(
      _cycleHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCycleStatus(
      _cycleHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCycleVotingDeadline(
      _cycleHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    proposingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProposalThreshold(
      _newProposalThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProposingPeriod(
      _newProposingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVotingPeriod(
      _newVotingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    castVote(
      _voterAddress: PromiseOrValue<string>,
      _proposalHash: PromiseOrValue<string>,
      _numTokens: PromiseOrValue<BigNumberish>,
      _voteDirection: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    countVotesForProposal(
      _cycleHash: PromiseOrValue<BytesLike>,
      _proposalHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createProposal(
      _proposalHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cycles(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extendCycle(
      _additionalDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentCycleHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCycleProposingDeadline(
      _cycleHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCycleStatus(
      _cycleHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCycleVotingDeadline(
      _cycleHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProposalThreshold(
      _newProposalThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProposingPeriod(
      _newProposingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVotingPeriod(
      _newVotingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
