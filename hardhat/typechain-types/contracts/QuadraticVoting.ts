/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface QuadraticVotingInterface extends utils.Interface {
  functions: {
    "castVote(string,string,uint256,bool)": FunctionFragment;
    "countVotesForProposal(string,string)": FunctionFragment;
    "createProposal(string,string)": FunctionFragment;
    "createVotingRound(string)": FunctionFragment;
    "extendVotingRound(string,uint256)": FunctionFragment;
    "getUserCredits()": FunctionFragment;
    "getVotingRoundExpirationTime(string)": FunctionFragment;
    "getVotingRoundStatus(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setRoundToActiveVoting(string,uint256,uint256)": FunctionFragment;
    "setRoundToEnded(string)": FunctionFragment;
    "setRoundToTally(string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "votingRounds(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "castVote"
      | "countVotesForProposal"
      | "createProposal"
      | "createVotingRound"
      | "extendVotingRound"
      | "getUserCredits"
      | "getVotingRoundExpirationTime"
      | "getVotingRoundStatus"
      | "owner"
      | "renounceOwnership"
      | "setRoundToActiveVoting"
      | "setRoundToEnded"
      | "setRoundToTally"
      | "transferOwnership"
      | "votingRounds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "castVote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "countVotesForProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createVotingRound",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "extendVotingRound",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCredits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingRoundExpirationTime",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingRoundStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRoundToActiveVoting",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoundToEnded",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoundToTally",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "votingRounds",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "countVotesForProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVotingRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendVotingRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingRoundExpirationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingRoundStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoundToActiveVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoundToEnded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoundToTally",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingRounds",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "ProposalCreated(string,string,uint256)": EventFragment;
    "VoteCast(address,string,bool,uint256)": EventFragment;
    "VotingRoundCreated(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingRoundCreated"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProposalCreatedEventObject {
  votingRoundHash: string;
  proposalHash: string;
  proposalNumber: BigNumber;
}
export type ProposalCreatedEvent = TypedEvent<
  [string, string, BigNumber],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface VoteCastEventObject {
  voter: string;
  proposalHash: string;
  voteDirection: boolean;
  castVotes: BigNumber;
}
export type VoteCastEvent = TypedEvent<
  [string, string, boolean, BigNumber],
  VoteCastEventObject
>;

export type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;

export interface VotingRoundCreatedEventObject {
  votingRoundHash: string;
}
export type VotingRoundCreatedEvent = TypedEvent<
  [string],
  VotingRoundCreatedEventObject
>;

export type VotingRoundCreatedEventFilter =
  TypedEventFilter<VotingRoundCreatedEvent>;

export interface QuadraticVoting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QuadraticVotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    castVote(
      _votingRoundHash: PromiseOrValue<string>,
      _proposalHash: PromiseOrValue<string>,
      _numTokens: PromiseOrValue<BigNumberish>,
      _voteDirection: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    countVotesForProposal(
      _votingRoundHash: PromiseOrValue<string>,
      _proposalHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    createProposal(
      _votingRoundHash: PromiseOrValue<string>,
      _proposalHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createVotingRound(
      _votingRoundHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    extendVotingRound(
      _votingRoundHash: PromiseOrValue<string>,
      _additionalTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getUserCredits(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVotingRoundExpirationTime(
      _votingRoundHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVotingRoundStatus(
      _votingRoundHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoundToActiveVoting(
      _votingRoundHash: PromiseOrValue<string>,
      _expirationTime: PromiseOrValue<BigNumberish>,
      _votingCredits: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoundToEnded(
      _votingRoundHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoundToTally(
      _votingRoundHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votingRounds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber, BigNumber] & {
        votingRoundHash: string;
        status: number;
        expirationTime: BigNumber;
        votingCredits: BigNumber;
        proposalCount: BigNumber;
      }
    >;
  };

  castVote(
    _votingRoundHash: PromiseOrValue<string>,
    _proposalHash: PromiseOrValue<string>,
    _numTokens: PromiseOrValue<BigNumberish>,
    _voteDirection: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  countVotesForProposal(
    _votingRoundHash: PromiseOrValue<string>,
    _proposalHash: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  createProposal(
    _votingRoundHash: PromiseOrValue<string>,
    _proposalHash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createVotingRound(
    _votingRoundHash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  extendVotingRound(
    _votingRoundHash: PromiseOrValue<string>,
    _additionalTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getUserCredits(overrides?: CallOverrides): Promise<BigNumber>;

  getVotingRoundExpirationTime(
    _votingRoundHash: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVotingRoundStatus(
    _votingRoundHash: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoundToActiveVoting(
    _votingRoundHash: PromiseOrValue<string>,
    _expirationTime: PromiseOrValue<BigNumberish>,
    _votingCredits: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoundToEnded(
    _votingRoundHash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoundToTally(
    _votingRoundHash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votingRounds(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber, BigNumber, BigNumber] & {
      votingRoundHash: string;
      status: number;
      expirationTime: BigNumber;
      votingCredits: BigNumber;
      proposalCount: BigNumber;
    }
  >;

  callStatic: {
    castVote(
      _votingRoundHash: PromiseOrValue<string>,
      _proposalHash: PromiseOrValue<string>,
      _numTokens: PromiseOrValue<BigNumberish>,
      _voteDirection: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    countVotesForProposal(
      _votingRoundHash: PromiseOrValue<string>,
      _proposalHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    createProposal(
      _votingRoundHash: PromiseOrValue<string>,
      _proposalHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createVotingRound(
      _votingRoundHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    extendVotingRound(
      _votingRoundHash: PromiseOrValue<string>,
      _additionalTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getUserCredits(overrides?: CallOverrides): Promise<BigNumber>;

    getVotingRoundExpirationTime(
      _votingRoundHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingRoundStatus(
      _votingRoundHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setRoundToActiveVoting(
      _votingRoundHash: PromiseOrValue<string>,
      _expirationTime: PromiseOrValue<BigNumberish>,
      _votingCredits: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoundToEnded(
      _votingRoundHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoundToTally(
      _votingRoundHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    votingRounds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber, BigNumber] & {
        votingRoundHash: string;
        status: number;
        expirationTime: BigNumber;
        votingCredits: BigNumber;
        proposalCount: BigNumber;
      }
    >;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ProposalCreated(string,string,uint256)"(
      votingRoundHash?: null,
      proposalHash?: null,
      proposalNumber?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      votingRoundHash?: null,
      proposalHash?: null,
      proposalNumber?: null
    ): ProposalCreatedEventFilter;

    "VoteCast(address,string,bool,uint256)"(
      voter?: null,
      proposalHash?: null,
      voteDirection?: null,
      castVotes?: null
    ): VoteCastEventFilter;
    VoteCast(
      voter?: null,
      proposalHash?: null,
      voteDirection?: null,
      castVotes?: null
    ): VoteCastEventFilter;

    "VotingRoundCreated(string)"(
      votingRoundHash?: null
    ): VotingRoundCreatedEventFilter;
    VotingRoundCreated(votingRoundHash?: null): VotingRoundCreatedEventFilter;
  };

  estimateGas: {
    castVote(
      _votingRoundHash: PromiseOrValue<string>,
      _proposalHash: PromiseOrValue<string>,
      _numTokens: PromiseOrValue<BigNumberish>,
      _voteDirection: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    countVotesForProposal(
      _votingRoundHash: PromiseOrValue<string>,
      _proposalHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createProposal(
      _votingRoundHash: PromiseOrValue<string>,
      _proposalHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createVotingRound(
      _votingRoundHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    extendVotingRound(
      _votingRoundHash: PromiseOrValue<string>,
      _additionalTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getUserCredits(overrides?: CallOverrides): Promise<BigNumber>;

    getVotingRoundExpirationTime(
      _votingRoundHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingRoundStatus(
      _votingRoundHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoundToActiveVoting(
      _votingRoundHash: PromiseOrValue<string>,
      _expirationTime: PromiseOrValue<BigNumberish>,
      _votingCredits: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoundToEnded(
      _votingRoundHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoundToTally(
      _votingRoundHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votingRounds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    castVote(
      _votingRoundHash: PromiseOrValue<string>,
      _proposalHash: PromiseOrValue<string>,
      _numTokens: PromiseOrValue<BigNumberish>,
      _voteDirection: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    countVotesForProposal(
      _votingRoundHash: PromiseOrValue<string>,
      _proposalHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createProposal(
      _votingRoundHash: PromiseOrValue<string>,
      _proposalHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createVotingRound(
      _votingRoundHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    extendVotingRound(
      _votingRoundHash: PromiseOrValue<string>,
      _additionalTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getUserCredits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVotingRoundExpirationTime(
      _votingRoundHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingRoundStatus(
      _votingRoundHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoundToActiveVoting(
      _votingRoundHash: PromiseOrValue<string>,
      _expirationTime: PromiseOrValue<BigNumberish>,
      _votingCredits: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoundToEnded(
      _votingRoundHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoundToTally(
      _votingRoundHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votingRounds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
